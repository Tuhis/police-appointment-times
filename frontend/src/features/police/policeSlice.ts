import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import _ from 'lodash';
import { RootState, AppThunk } from '../../app/store';
import { FreeSlotsResponse } from './interfaces/IFreeSlotsResponse';
import IStation from './interfaces/IStation';
import { fetchFreeSlots, fetchStations } from './policeAPI';

export interface CounterState {
  status: 'idle' | 'loading' | 'failed';
  stations: {[id: string]: IStation};
  freeSlots: FreeSlotsResponse;
  freeSlotsStatus: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
  status: 'idle',
  stations: {},
  freeSlots: [],
  freeSlotsStatus: 'idle'
};

export const updateStationsAsync = createAsyncThunk(
  'police/fetchStations',
  async () => {
    const response = await fetchStations();

    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const updateFreeSlotsAsync = createAsyncThunk(
  'police/fetchFreeSlots',
  async () => {
    const response = await fetchFreeSlots();

    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const policeSlice = createSlice({
  name: 'police',
  initialState,
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(updateStationsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateStationsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.stations = action.payload;
      })
      .addCase(updateFreeSlotsAsync.pending, (state) => {
        state.freeSlotsStatus = 'loading';
      })
      .addCase(updateFreeSlotsAsync.fulfilled, (state, action) => {
        state.freeSlotsStatus = 'idle';
        if (_.isEmpty(action.payload)) state.freeSlotsStatus = 'failed';
        state.freeSlots = action.payload;
      });
  },
});

export const selectCount = (state: RootState) => state.counter.value;
export const selectStations = (state: RootState) => state.police.stations;
export const selectFreeSlots = (state: RootState) => state.police.freeSlots;
export const selectFreeSlotsStatus = (state: RootState) => state.police.freeSlotsStatus;

// TODO Add action for updating data if old

export default policeSlice.reducer;
