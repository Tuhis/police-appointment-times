import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import _ from 'lodash';
import { RootState, AppThunk } from '../../app/store';
import { FreeSlotsResponse } from './interfaces/IFreeSlotsResponse';
import IStation from './interfaces/IStation';
import { fetchFreeSlots, fetchFreeSlotsForStation, fetchStations } from './policeAPI';

export interface PoliceState {
  status: 'idle' | 'loading' | 'failed';
  stations: {[id: string]: IStation};
  freeSlots: FreeSlotsResponse;
  freeSlotsStatus: 'idle' | 'loading' | 'failed';
  chosenStationFreeSlots: string[];
  chosenStationFreeSlotsStatus: 'idle' | 'loading' | 'failed';
  chosenStationId: string | null;
  chosenDate: string
}

const initialState: PoliceState = {
  status: 'idle',
  stations: {},
  freeSlots: [],
  freeSlotsStatus: 'idle',
  chosenStationFreeSlots: [],
  chosenStationFreeSlotsStatus: 'idle',
  chosenStationId: null,
  chosenDate: "",
};

export const updateStationsAsync = createAsyncThunk(
  'police/fetchStations',
  async () => {
    const response = await fetchStations();

    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const updateFreeSlotsAsync = createAsyncThunk(
  'police/fetchFreeSlots',
  async () => {
    const response = await fetchFreeSlots();

    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const updateChosenStationFreeSlotsAsync = createAsyncThunk(
  'police/fetchFreeSlotsForStation',
  async (params: { stationId: string, dateString: string}) => {
    return await fetchFreeSlotsForStation(params.stationId, params.dateString);
  }
);

export const policeSlice = createSlice({
  name: 'police',
  initialState,
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    chooseStation: (state, action: PayloadAction<string>) => {
      state.chosenStationId = action.payload;
    },
    closeStation: (state) => {
      state.chosenStationId = null;
    },
    chooseDate: (state, action: PayloadAction<string>) => {
      state.chosenDate = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(updateStationsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateStationsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.stations = action.payload;
      })
      .addCase(updateFreeSlotsAsync.pending, (state) => {
        state.freeSlotsStatus = 'loading';
      })
      .addCase(updateFreeSlotsAsync.fulfilled, (state, action) => {
        state.freeSlotsStatus = 'idle';
        if (_.isEmpty(action.payload)) state.freeSlotsStatus = 'failed';
        state.freeSlots = action.payload;
      })
      .addCase(updateChosenStationFreeSlotsAsync.pending, (state) => {
        state.chosenStationFreeSlotsStatus = 'loading';
      })
      .addCase(updateChosenStationFreeSlotsAsync.fulfilled, (state, action) => {
        state.chosenStationFreeSlotsStatus = 'idle';
        state.chosenStationFreeSlots = action.payload;
      });
  },
});

export const { chooseStation, closeStation, chooseDate } = policeSlice.actions;

export const selectCount = (state: RootState) => state.counter.value;
export const selectStations = (state: RootState) => state.police.stations;
export const selectFreeSlots = (state: RootState) => state.police.freeSlots;
export const selectFreeSlotsStatus = (state: RootState) => state.police.freeSlotsStatus;
export const selectChosenStationId = (state: RootState) => state.police.chosenStationId;
export const selectChosenStationFreeSlots = (state: RootState) => state.police.chosenStationFreeSlots;
export const selectChosenDate = (state: RootState) => state.police.chosenDate;
export const selectChosenStation = (state: RootState) => _.get(state.police.stations, _.isNull(state.police.chosenStationId) ? "" : state.police.chosenStationId);

// TODO Add action for updating data if old

export default policeSlice.reducer;
